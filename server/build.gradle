buildscript {
	ext {
        appName = "gms"
		springBootVersion = '1.5.6.RELEASE'
		nodePluginVersion = '1.2.0'
        propdepsPluginVersion = '0.0.9.RELEASE'
        jwtVersion = '0.9.0'
        lombokVersion = '1.16.18'
        buildClient = false
        envSet = false
        buildPropertiesFilePath = "./build/resources/main/application.properties"
        snippetsDir = file('build/generated-snippets')
        apiDocsFolder = "apidocs"
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}"
        classpath "io.spring.gradle:propdeps-plugin:${propdepsPluginVersion}"
	}
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.moowork.node'
apply plugin: 'org.asciidoctor.convert'

group = 'com.gms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}

node {
    download = false
    nodeModulesDir = file("../client")
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile("io.jsonwebtoken:jjwt:${jwtVersion}")
	compile('org.springframework.boot:spring-boot-starter-web')
    compileOnly ("org.projectlombok:lombok:${lombokVersion}")
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('org.postgresql:postgresql')
    testCompile("com.jayway.jsonpath:json-path")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	testCompile('org.springframework.security:spring-security-test')
    optional ("org.springframework.boot:spring-boot-configuration-processor")
}

//region custom tasks

//region client task
task clientBuild(type: NpmTask) {
    group = 'client tasks'
    description = "Compiles client side folder for production"
    args = ['run', 'buildProd']
}

task copyClientBuild(type: Copy, dependsOn: ['clientBuild']) {
    group = 'client tasks'
    description = "Checks all client side resources are ready for deployment"
    from '../client/dist'
    into 'build/resources/main/static'
}
//endregion

//region environments config
task setDevConfig() {
    group = 'other'
    description = "Sets the environment for development mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p  != 'development') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "development")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'development') {
            println 'Environment set for development mode...'
        }
    }
}

task setTestingConfig() {
    group = 'other'
    description = "Sets the environment for testing mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p != 'test') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "test")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'test') {
            println 'Environment set for testing mode...'
        }
    }
}

task setProductionConfig() {
    group = 'other'
    description = "Sets the environment for production mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p  != 'production') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "production")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'production') {
            println 'Environment set for production mode...'
        }
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
private String getSpringAppPropertyInBuild(String key){
    def props = new Properties()
    def propFile = new File(buildPropertiesFilePath)
    def p = null

    if (propFile.exists() && propFile.canRead()){
        props.load(new FileInputStream(propFile))
        if (props!=null && props.containsKey(key)) {
            p = props[key]
        }
    }
    return p
}

//endregion

//region control enabled tasks
clientBuild.enabled = buildClient
copyClientBuild.enabled = buildClient

task resetConfigTaskState(type: Exec) {
    group = 'other'
    description = 'Resets the custom tasks to their original state'
    doLast {
        clientBuild.enabled = buildClient
        copyClientBuild.enabled = buildClient
        setDevConfig.enabled = true
        setTestingConfig.enabled = true
        setProductionConfig.enabled = true
    }
}
//endregion

//region api docs
asciidoctor {
    //noinspection GroovyAssignabilityCheck
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

task processApiDocs(type: Copy, dependsOn: asciidoctor) {
    group = 'build'
    description = "Copies de api documentation to the destinated folder"
    from "${asciidoctor.outputDir}/html5"
    into "build/resources/main/static/" + (apiDocsFolder as String)
}
//endregion

task warForTesting(type: War, dependsOn: ['setTestingConfig', 'processApiDocs', 'copyClientBuild']) {
    group = 'build'
    description = "Generates a war archive with all the compiled classes, the web-app content and the libraries ready for testing environment"
}

//endregion

resetConfigTaskState.mustRunAfter(bootRun, war, warForTesting, clean)

clean.dependsOn(setDevConfig)
bootRun.dependsOn(setDevConfig)

test {
    dependsOn setTestingConfig
    outputs.dir snippetsDir
}

testClasses.dependsOn(setTestingConfig)

war {
    dependsOn setProductionConfig, processApiDocs, copyClientBuild
    baseName = appName
}

compileJava.dependsOn(processResources)