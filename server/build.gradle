buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
        buildClient = false
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"

group = 'com.gmsboilerplatesbng'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

war {
    baseName = 'GMSBoilerplate_SB-NG'
}

repositories {
	mavenLocal()
	mavenCentral()
}

node {
    download = false
    nodeModulesDir = file("../client")
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	testCompile('org.springframework.security:spring-security-test')
}

task clientBuild(type: NpmTask) {
    group = 'client tasks'
    description = "Compiles client side folder for production"
    def exArgs = ['--version']

    if(buildClient) {
        exArgs = ['run', 'buildProd']
        System.out.println("Building client resources (if configured)")
    }
    else {
        System.out.println("Build client resources SKIPPED")
    }
    args = exArgs
}

task checkClientBuild(type: Copy, dependsOn: ['clientBuild']) {
    group = 'client tasks'
    description = "Checks all client side resources are ready for deployment"
    from '../client/dist'
    into 'src/main/resources/static'
}

// add client deployment to tasks when needed
war.dependsOn(checkClientBuild)