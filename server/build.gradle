buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
        buildClient = true
        envSet = false
        deleteStaticContent = true
        buildPropertiesFilePath = "./build/resources/main/application.properties"
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"

group = 'com.gmsboilerplatesbng'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

war {
    baseName = 'GMSBoilerplate_SB-NG'
}

repositories {
	mavenLocal()
	mavenCentral()
}

node {
    download = false
    nodeModulesDir = file("../client")
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-hateoas")
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
    compileOnly ('org.projectlombok:lombok:1.16.18')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('org.postgresql:postgresql')
    testCompile("com.jayway.jsonpath:json-path")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	testCompile('org.springframework.security:spring-security-test')
}

//region custom tasks

//region client task
task clientBuild(type: NpmTask) {
    group = 'client tasks'
    description = "Compiles client side folder for production"
    args = ['run', 'buildProd']
}

task deleteStatic(type: Delete) {
	group = 'build'
	description = "Deletes all resources insiden the static folder"

    doFirst {
        if(deleteStaticContent) {
            delete fileTree(dir: 'src/main/resources/static', include: '**.**')
        }
    }
    doLast {
        println "Static content processed"
    }
}

task copyClientBuild(type: Copy, dependsOn: ['deleteStatic', 'clientBuild']) {
    group = 'client tasks'
    description = "Checks all client side resources are ready for deployment"
    from '../client/dist'
    into 'src/main/resources/static'
}
//endregion

//region environments config
task setDevConfig() {
    group = 'other'
    description = "Sets the environment for development mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p  != 'development') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "development")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'development') {
            println 'Environment set for development mode...'
        }
    }
}

task setTestingConfig() {
    group = 'other'
    description = "Sets the environment for testing mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p != 'test') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "test")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'test') {
            println 'Environment set for testing mode...'
        }
    }
}

task setProductionConfig() {
    group = 'other'
    description = "Sets the environment for production mode"
    doFirst {
        def p = getSpringAppPropertyInBuild('spring.profiles.active')
        if (p && p  != 'production') {
            ant.propertyfile(file: buildPropertiesFilePath) {
                entry(key: "spring.profiles.active", value: "production")
            }
            envSet = true
        }
    }
    doLast {
        if (getSpringAppPropertyInBuild('spring.profiles.active') == 'production') {
            println 'Environment set for production mode...'
        }
    }
}
//endregion

task warForTesting(type: War, dependsOn: ['copyClientBuild', 'setTestingConfig']) {
    group = 'build'
    description = "Generates a war archive with all the compiled classes, the web-app content and the libraries ready for testing environment"
}

//region control enabled tasks
clientBuild.enabled = buildClient
deleteStatic.enabled = deleteStaticContent
copyClientBuild.enabled = buildClient

task resetConfigTaskState(type: Exec) {
    group = 'other'
    description = 'Resets the custom tasks to their original state'
    doLast {
        clientBuild.enabled = buildClient
        deleteStatic.enabled = deleteStaticContent
        copyClientBuild.enabled = buildClient
        setDevConfig.enabled = true
        setTestingConfig.enabled = true
        setProductionConfig.enabled = true
    }
}
resetConfigTaskState.mustRunAfter(bootRun, war, warForTesting, clean)
//endregion

String getSpringAppPropertyInBuild(String key){
    def props = new Properties()
    def propFile = new File(buildPropertiesFilePath)
    def p = null

    if (propFile.exists() && propFile.canRead()){
        props.load(new FileInputStream(propFile))
        if (props!=null && props.containsKey(key)) {
            p = props[key]
        }
    }
    return p
}
//endregion

clean.dependsOn(setDevConfig, deleteStatic)
bootRun.dependsOn(setDevConfig, deleteStatic)

// add client deployment to tasks when needed
processResources.dependsOn(copyClientBuild) //copy client source into static before copying them to war
war.dependsOn(setProductionConfig) //before packing war, set prod env